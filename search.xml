<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2022/02/27/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h1><h2 id="1-1-Java语言发展史"><a href="#1-1-Java语言发展史" class="headerlink" title="1.1 Java语言发展史"></a>1.1 Java语言发展史</h2><p>语言：人与人交流沟通的表达方式<br>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言<br>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言<br>Java之父：詹姆斯·高斯林（James Gosling）<br>2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a></p>
<h2 id="1-2-Java语言跨平台原理"><a href="#1-2-Java语言跨平台原理" class="headerlink" title="1.2 Java语言跨平台原理"></a>1.2 Java语言跨平台原理</h2><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚<br>拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的<br>跨平台。</p>
<h2 id="1-3-JRE和JDK"><a href="#1-3-JRE和JDK" class="headerlink" title="1.3 JRE和JDK"></a>1.3 JRE和JDK</h2><p>JVM（Java Virtual Machine），Java虚拟机<br>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）<br>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具<br>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>
<h2 id="1-4-JDK的下载和安装"><a href="#1-4-JDK的下载和安装" class="headerlink" title="1.4 JDK的下载和安装"></a>1.4 JDK的下载和安装</h2><p>通过官方网站获取JDK<br><a href="http://www.oracle.com/">http://www.oracle.com</a><br>注意：针对不同的操作系统，需要下载对应版本的JDK。<br>具体下载步骤请参见《JDK下载及安装说明文档》</p>
<h3 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h3><p>傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与<br>开发相关的软件都安装到一个目录下，例如：E:\develop。<br><strong>注意：</strong>安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。<br>具体安装步骤请参见《JDK下载及安装说明文档》</p>
<h3 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h3><img src ="https://github.com/Orangecat10086/Orangecat10086.github.io/tree/master/assets/index_img.jpg">
# 2. 第一个演示程序
## 2.1 常用DOS命令（应用）
在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命
令。
1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。
2、常用命令及其作用
![](https://note.youdao.com/s/dt3562bH)
## 2.2 Path环境变量的配置（应用）
### 2.2.1 为什么配置环境变量
开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的
bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK
的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。
### 2.2.2 配置环境变量步骤
具体配置步骤请参见《Java环境变量配置说明》文档。
## 2.3 HelloWorld案例（应用）
HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演
示案例。
### 2.3.1 Java程序开发运行流程
开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。
### 2.3.2 HelloWorld案例的编写
1、新建文本文档文件，修改名称为HelloWorld.java。
2、用记事本打开HelloWorld.java文件，输写程序内容。
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
### 2.3.3 HelloWorld案例的编译和运行
保存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编译：javac 文件名.java</span><br><span class="line">范例：javac HelloWorld.java</span><br><span class="line">执行：java 类名</span><br><span class="line">范例：java HelloWorld</span><br></pre></td></tr></table></figure>
## 2.4 HelloWorld案例常见问题（理解）
### 2.4.1 BUG
在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。
### 2.4.2 BUG的解决
1、具备识别BUG的能力：多看
2、具备分析BUG的能力：多思考，多查资料
3、具备解决BUG的能力：多尝试，多总结
### 2.4.3 HelloWorld案例常见问题
1、非法字符问题。Java中的符号都是英文格式的。
2、大小写问题。Java语言对大小写敏感（区分大小写）。
3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
4、编译命令后的java文件名需要带文件后缀.java
5、运行命令后的class文件名（类名）不带文件后缀.class
...

<h1 id="3-java基础语法"><a href="#3-java基础语法" class="headerlink" title="3. java基础语法"></a>3. java基础语法</h1><h2 id="3-1-注释（理解）"><a href="#3-1-注释（理解）" class="headerlink" title="3.1 注释（理解）"></a>3.1 注释（理解）</h2><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的<br>注释分为三种：<br><strong>单行注释：</strong>单行注释的格式是使用&#x2F;&#x2F;，从&#x2F;&#x2F;开始至本行结尾的文字将作为注释文字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这是单行注释文字</span><br></pre></td></tr></table></figure>
<p><strong>多行注释：</strong>多行注释的格式是使用&#x2F;* 和 *&#x2F;将一段较长的注释括起来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">这是多行注释文字</span><br><span class="line">这是多行注释文字</span><br><span class="line">这是多行注释文字</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>多行注释不能嵌套使用。</p>
<p><strong>文档注释：</strong>文档注释以 &#x2F;** 开始，以 *&#x2F; 结束。</p>
<h2 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3.2 关键字"></a>3.2 关键字</h2><p>关键字是指被java语言赋予了特殊含义的单词。<br><strong>关键字的特点：</strong>关键字的字母全部小写。<br>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p>
<h2 id="3-3-常量"><a href="#3-3-常量" class="headerlink" title="3.3 常量"></a>3.3 常量</h2><p><strong>常量：</strong>在程序运行过程中，其值不可以发生改变的量。<br><strong>Java中的常量分类：</strong><br>字符串常量 用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等<br>整数常量 整数，例如：-10、0、88等<br>小数常量 小数，例如：-5.5、1.0、88.88等<br>字符常量 用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等<br>布尔常量 布尔值，表示真假，只有两个值true和false<br>空常量 一个特殊的值，空值，值为null<br>除空常量外，其他常量均可使用输出语句直接输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(10); // 输出一个整数</span><br><span class="line">        System.out.println(5.5); // 输出一个小数</span><br><span class="line">        System.out.println(&#x27;a&#x27;); // 输出一个字符</span><br><span class="line">        System.out.println(true); // 输出boolean值true</span><br><span class="line">        System.out.println(&quot;HelloWorld&quot;); // 输出字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-数据类型（记忆、应用）"><a href="#3-4-数据类型（记忆、应用）" class="headerlink" title="3.4 数据类型（记忆、应用）"></a>3.4 数据类型（记忆、应用）</h2><h3 id="3-4-1-计算机存储单元"><a href="#3-4-1-计算机存储单元" class="headerlink" title="3.4.1 计算机存储单元"></a>3.4.1 计算机存储单元</h3><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位<br>（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，<br>通常用大写字母”B”表示，字节是由连续的8个位组成。<br>除了字节外还有一些常用的存储单位，其换算单位如下：<br>1B（字节） &#x3D; 8bit<br>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</p>
<h2 id="3-4-2-Java中的数据类型"><a href="#3-4-2-Java中的数据类型" class="headerlink" title="3.4.2 Java中的数据类型"></a>3.4.2 Java中的数据类型</h2><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型<br>两种。<br><strong>Java中的基本数据类型：</strong><br><img src="https://note.youdao.com/s/dEdvtsip"><br><strong>说明：</strong><br>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。<br>在java中整数默认是int类型，浮点数默认是double类型。</p>
<h2 id="3-5-变量"><a href="#3-5-变量" class="headerlink" title="3.5 变量"></a>3.5 变量</h2><h3 id="3-5-1-变量的定义"><a href="#3-5-1-变量的定义" class="headerlink" title="3.5.1 变量的定义"></a>3.5.1 变量的定义</h3><p><strong>变量：</strong>在程序运行过程中，其值可以发生改变的量。<br>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。<br><strong>变量的定义格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; // 声明变量并赋值</span><br><span class="line">int age = 18;</span><br><span class="line">System.out.println(age);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先声明，后赋值（使用前赋值即可）</span><br><span class="line">数据类型 变量名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line">double money;</span><br><span class="line">money = 55.5;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure>
<p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读<br>性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">int c,d; // 声明int类型的变量c和d，中间使用逗号隔开</span><br><span class="line">c = 30;</span><br><span class="line">d = 40;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure>
<p>变量的使用：通过变量名访问即可。</p>
<h3 id="3-5-2-使用变量时的注意事项"><a href="#3-5-2-使用变量时的注意事项" class="headerlink" title="3.5.2 使用变量时的注意事项"></a>3.5.2 使用变量时的注意事项</h3><ol>
<li>在同一对花括号中，变量名不能重复。</li>
<li>变量在使用之前，必须初始化（赋值）。</li>
<li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太<br>大可能超出int范围。</li>
<li>定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是<br>double， double的取值范围是大于float的，类型不兼容。<h2 id="3-6-标识符（记忆、理解）"><a href="#3-6-标识符（记忆、理解）" class="headerlink" title="3.6 标识符（记忆、理解）"></a>3.6 标识符（记忆、理解）</h2>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。<br>Java中标识符的组成规则：<br>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。<br>不能使用java中的关键字作为标识符。<br>标识符对大小写敏感（区分大小写）。<br>Java中标识符的命名约定：</li>
</ol>
<p><strong>小驼峰式命名：</strong>变量名、方法名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userNmae</span><br></pre></td></tr></table></figure>
<p>首字母小写，从第二个单词开始每个单词的首字母大写。<br><strong>大驼峰式命名：</strong>类名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserName</span><br></pre></td></tr></table></figure>
<p>每个单词的首字母都大写。<br>另外，标识符的命名最好可以做到见名知意<br><strong>例如：</strong>username、studentNumber等。</p>
<h2 id="3-7-类型转换"><a href="#3-7-类型转换" class="headerlink" title="3.7 类型转换"></a>3.7 类型转换</h2><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。<br>自动类型转换：<br>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即<br>可。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double num = 10; // 将int类型的10直接赋值给double类型</span><br><span class="line">System.out.println(num); // 输出10.0</span><br></pre></td></tr></table></figure>
<p>强制类型转换：<br>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。<br>强制类型转换格式：目标数据类型 变量名 &#x3D; (目标数据类型)值或者变量;<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double num1 = 5.5;</span><br><span class="line">int num2 = (int) num1; // 将double类型的num1强制转换为int类型</span><br><span class="line">System.out.println(num2); // 输出5（小数位直接舍弃）</span><br></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/s/CNQax1Jn"><br>说明：</p>
<ol>
<li><p>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = &#x27;a&#x27;;</span><br><span class="line">System.out.println(a); // 将输出97</span><br></pre></td></tr></table></figure>
</li>
<li><p>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte b1 = 10;</span><br><span class="line">byte b2 = 20;</span><br><span class="line">byte b3 = b1 + b2;</span><br><span class="line">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span><br><span class="line">// 修改为:</span><br><span class="line">int num = b1 + b2;</span><br><span class="line">// 或者：</span><br><span class="line">byte b3 = (byte) (b1 + b2);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意：</strong>boolean类型不能与其他基本数据类型相互转换。</p>
]]></content>
      <categories>
        <category>JavaSE-笔记</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
</search>
