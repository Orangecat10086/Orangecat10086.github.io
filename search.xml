<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDK下载及安装</title>
    <url>/2022/02/28/JDK-%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>以Windows10系统下的JDK下载和安装为例进行说明。</p>
<h1 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h1><p>访问oracle官网：<a href="http://www.oracle.com/">http://www.oracle.com</a><br>1、在首页点击产品选择Java<br><img src="https://cdn.ideaopen.cn/Orangecat/kmHIgrE7.png" alt="2022-02-28 193229.png"><br>2、点击下载Java<br><img src="https://cdn.ideaopen.cn/Orangecat/E6EuX2Cn.png" alt="2022-02-28 193931.png"><br>3、选择Java存档<br><img src="https://cdn.ideaopen.cn/Orangecat/YNchPquS.png" alt="2022-02-28 193708.png"><br>4、下拉页面选择合适的Java版本，这里选择的是Java8<br><img src="https://cdn.ideaopen.cn/Orangecat/6ToaVpEz.png" alt="2022-02-28 193635.png"><br>5、在Java SE Development Kit中选择自己对应的系统，点击下载<br><img src="https://cdn.ideaopen.cn/Orangecat/hEdcK42c.png" alt="2022-02-28 194549.png"><br><img src="https://cdn.ideaopen.cn/Orangecat/tBxW1jsp.png" alt="2022-02-28 194609.png"><br>6、选择我同意，点击下载<br><img src="https://cdn.ideaopen.cn/Orangecat/TVxWXV6w.png" alt="2022-02-28 195340.png"><br>7、下载完成后双击运行安装包<br><img src="https://cdn.ideaopen.cn/Orangecat/nmh0lleE.png" alt="2022-02-28 195836.png"><br><img src="https://cdn.ideaopen.cn/Orangecat/GHfqa363.png" alt="2022-02-28 200026.png"><br>选择你想安装的位置<br><strong>例如：</strong><br>D:\Program Files\Java\jdk1.8.0_65<br><img src="https://cdn.ideaopen.cn/Orangecat/KdGZUInV.png" alt="2022-02-28 200047.png"><br>JDK安装后，安装程序会询问你JRE要安装的位置。<br><strong>在这里我选择：</strong><br>C:\DevPrograms\Java\jre.8.0_65<br><img src="https://cdn.ideaopen.cn/Orangecat/6OHW1I3o.png" alt="2022-02-28 200110.png"><br>经过一段时间后，Java 成功完成安装。<br><img src="https://cdn.ideaopen.cn/Orangecat/gXs547WI.png" alt="2022-02-28 200128.png"></p>
]]></content>
      <categories>
        <category>JavaSE-笔记</category>
      </categories>
      <tags>
        <tag>JDK下载及安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-基础入门</title>
    <url>/2022/02/27/Java-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><h2 id="Java语言发展史"><a href="#Java语言发展史" class="headerlink" title="Java语言发展史"></a>Java语言发展史</h2><p>语言：人与人交流沟通的表达方式<br>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言<br>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言<br>Java之父：詹姆斯·高斯林（James Gosling）<br>2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a></p>
<h2 id="Java语言跨平台原理"><a href="#Java语言跨平台原理" class="headerlink" title="Java语言跨平台原理"></a>Java语言跨平台原理</h2><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。</p>
<h2 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a>JRE和JDK</h2><p>JVM（Java Virtual Machine），Java虚拟机<br>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）<br>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具<br><strong>总结：</strong><br>我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>
<h2 id="JDK的下载和安装"><a href="#JDK的下载和安装" class="headerlink" title="JDK的下载和安装"></a>JDK的下载和安装</h2><p>通过官方网站获取JDK<br><a href="http://www.oracle.com/">http://www.oracle.com</a><br><strong>注意：</strong><br>针对不同的操作系统，需要下载对应版本的JDK。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>具体下载及安装步骤详见<a href="#">Post not found: JDK下载及安装</a><br><strong>例如：</strong><br>E:\develop。<br><strong>注意：</strong><br>安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p>
<h3 id="JDK的安装目录介绍"><a href="#JDK的安装目录介绍" class="headerlink" title="JDK的安装目录介绍"></a>JDK的安装目录介绍</h3><p><img src="https://cdn.ideaopen.cn/Orangecat/wp8vYoBK.png"></p>
<h1 id="第一个演示程序"><a href="#第一个演示程序" class="headerlink" title="第一个演示程序"></a>第一个演示程序</h1><h2 id="常用DOS命令（应用）"><a href="#常用DOS命令（应用）" class="headerlink" title="常用DOS命令（应用）"></a>常用DOS命令（应用）</h2><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。<br>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。<br>2、常用命令及其作用<br><img src="https://cdn.ideaopen.cn/Orangecat/CNjXelaB.png"></p>
<h2 id="Path环境变量的配置（应用）"><a href="#Path环境变量的配置（应用）" class="headerlink" title="Path环境变量的配置（应用）"></a>Path环境变量的配置（应用）</h2><h3 id="为什么配置环境变量"><a href="#为什么配置环境变量" class="headerlink" title="为什么配置环境变量"></a>为什么配置环境变量</h3><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。</p>
<h3 id="配置环境变量步骤"><a href="#配置环境变量步骤" class="headerlink" title="配置环境变量步骤"></a>配置环境变量步骤</h3><p>具体配置步骤详见<a href="#">Post not found: Java环境配置</a></p>
<h2 id="HelloWorld案例（应用）"><a href="#HelloWorld案例（应用）" class="headerlink" title="HelloWorld案例（应用）"></a>HelloWorld案例（应用）</h2><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p>
<h3 id="Java程序开发运行流程"><a href="#Java程序开发运行流程" class="headerlink" title="Java程序开发运行流程"></a>Java程序开发运行流程</h3><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p>
<h3 id="HelloWorld案例的编写"><a href="#HelloWorld案例的编写" class="headerlink" title="HelloWorld案例的编写"></a>HelloWorld案例的编写</h3><p>1、新建文本文档文件，修改名称为HelloWorld.java。<br>2、用记事本打开HelloWorld.java文件，输写程序内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HelloWorld案例的编译和运行"><a href="#HelloWorld案例的编译和运行" class="headerlink" title="HelloWorld案例的编译和运行"></a>HelloWorld案例的编译和运行</h3><p>保存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编译：javac 文件名.java</span><br><span class="line">范例：javac HelloWorld.java</span><br><span class="line">执行：java 类名</span><br><span class="line">范例：java HelloWorld</span><br></pre></td></tr></table></figure>
<h2 id="HelloWorld案例常见问题"><a href="#HelloWorld案例常见问题" class="headerlink" title="HelloWorld案例常见问题"></a>HelloWorld案例常见问题</h2><h3 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h3><p>在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p>
<h3 id="BUG的解决"><a href="#BUG的解决" class="headerlink" title="BUG的解决"></a>BUG的解决</h3><p>1、具备识别BUG的能力：多看<br>2、具备分析BUG的能力：多思考，多查资料<br>3、具备解决BUG的能力：多尝试，多总结</p>
<h3 id="HelloWorld案例常见问题-1"><a href="#HelloWorld案例常见问题-1" class="headerlink" title="HelloWorld案例常见问题"></a>HelloWorld案例常见问题</h3><p>1、非法字符问题。Java中的符号都是英文格式的。<br>2、大小写问题。Java语言对大小写敏感（区分大小写）。<br>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、编译命令后的java文件名需要带文件后缀.java<br>5、运行命令后的class文件名（类名）不带文件后缀.class<br>…</p>
]]></content>
      <categories>
        <category>JavaSE-笔记</category>
      </categories>
      <tags>
        <tag>Java概述</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-流程控制语句</title>
    <url>/2022/02/28/Java-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>
<h2 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h2><p>顺序结构<br>分支结构(if, switch)<br>循环结构(for, while, do…while)</p>
<h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br><strong>顺序结构执行流程图：</strong><br><img src="https://cdn.ideaopen.cn/Orangecat/tFdVIgMi.png" alt="2022-02-28 205648.png"></p>
<h2 id="分支结构之if语句"><a href="#分支结构之if语句" class="headerlink" title="分支结构之if语句"></a>分支结构之if语句</h2><h3 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (关系表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行流程：</strong><br>1、首先计算关系表达式的值<br>2、如果关系表达式的值为true就执行语句体<br>3、如果关系表达式的值为false就不执行语句体<br>4、继续执行后面的语句内容<br><img src="https://cdn.ideaopen.cn/Orangecat/9973KNLb.png" alt="2022-02-28 205855.png"><br><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class IfDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;开始&quot;);</span><br><span class="line">        //定义两个变量</span><br><span class="line">        int a = 10;</span><br><span class="line">        int b = 20;</span><br><span class="line">        //需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span><br><span class="line">        if(a == b) &#123;</span><br><span class="line">        System.out.println(&quot;a等于b&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span><br><span class="line">        int c = 10;</span><br><span class="line">        if(a == c) &#123;</span><br><span class="line">        System.out.println(&quot;a等于c&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="f语句格式2"><a href="#f语句格式2" class="headerlink" title="f语句格式2"></a>f语句格式2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (关系表达式) &#123;</span><br><span class="line">    语句体1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    语句体2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>执行流程：</strong><br>1、首先计算关系表达式的值<br>2、如果关系表达式的值为true就执行语句体1<br>3、如果关系表达式的值为false就执行语句体2<br>4、继续执行后面的语句内容<br><img src="https://cdn.ideaopen.cn/Orangecat/PwuelKiv.png" alt="2022-02-28 210358.png"><br><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class IfDemo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;开始&quot;);</span><br><span class="line">        //定义两个变量</span><br><span class="line">        int a = 10;</span><br><span class="line">        int b = 20;</span><br><span class="line">        b = 5;</span><br><span class="line">        //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span><br><span class="line">        if(a &gt; b) &#123;</span><br><span class="line">            System.out.println(&quot;a的值大于b&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;a的值不大于b&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;结束&quot;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="if语句案例：奇偶数"><a href="#if语句案例：奇偶数" class="headerlink" title="if语句案例：奇偶数"></a>if语句案例：奇偶数</h3><p><strong>需求：</strong><br>任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。<br><strong>分析：</strong><br>1、为了体现任意给出一个整数，采用键盘录入一个数据<br>2、判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构<br>3、判断是否偶数需要使用取余运算符实现该功能 number % 2 &#x3D;&#x3D; 0<br>4、根据判定情况，在控制台输出对应的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class IfTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个整数：&quot;);</span><br><span class="line">        int number = sc.nextInt();</span><br><span class="line">        //判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构</span><br><span class="line">        //判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</span><br><span class="line">        //根据判定情况，在控制台输出对应的内容</span><br><span class="line">        if(number%2 == 0) &#123;</span><br><span class="line">            System.out.println(number + &quot;是偶数&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(number + &quot;是奇数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (关系表达式1) &#123;</span><br><span class="line">    语句体1;</span><br><span class="line">&#125; else if (关系表达式2) &#123;</span><br><span class="line">    语句体2;</span><br><span class="line">&#125;</span><br><span class="line">…</span><br><span class="line">else &#123;</span><br><span class="line">    语句体n+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>执行流程：</strong><br>1、首先计算关系表达式1的值<br>2、如果值为true就执行语句体1；如果值为false就计算关系表达式2的值<br>3、如果值为true就执行语句体2；如果值为false就计算关系表达式3的值<br>4、…<br>5、如果没有任何关系表达式为true，就执行语句体n+1。<br><img src="https://cdn.ideaopen.cn/Orangecat/GApim3yN.png" alt="2022-02-28 211503.png"><br><strong>示例：</strong><br>键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class IfDemo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;开始&quot;);</span><br><span class="line">        // 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个星期数(1-7)：&quot;);</span><br><span class="line">        int week = sc.nextInt();</span><br><span class="line">        if(week == 1) &#123;</span><br><span class="line">            System.out.println(&quot;星期一&quot;);</span><br><span class="line">        &#125; else if(week == 2) &#123;</span><br><span class="line">            System.out.println(&quot;星期二&quot;);</span><br><span class="line">        &#125; else if(week == 3) &#123;</span><br><span class="line">            System.out.println(&quot;星期三&quot;);</span><br><span class="line">        &#125; else if(week == 4) &#123;</span><br><span class="line">            System.out.println(&quot;星期四&quot;);</span><br><span class="line">        &#125; else if(week == 5) &#123;</span><br><span class="line">            System.out.println(&quot;星期五&quot;);</span><br><span class="line">        &#125; else if(week == 6) &#123;</span><br><span class="line">            System.out.println(&quot;星期六&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;星期日&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(&quot;结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="if语句格式3案例"><a href="#if语句格式3案例" class="headerlink" title="if语句格式3案例"></a>if语句格式3案例</h3><p><strong>需求：</strong><br>小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。<br><strong>分析：</strong><br>1、小明的考试成绩未知，可以使用键盘录入的方式获取值<br>2、由于奖励种类较多，属于多种判断，采用if…else…if格式实现<br>3、为每种判断设置对应的条件<br>4、为每种判断设置对应的奖励</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class IfTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //小明的考试成绩未知，可以使用键盘录入的方式获取值</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个分数：&quot;);</span><br><span class="line">        int score = sc.nextInt();</span><br><span class="line">        //由于奖励种类较多，属于多种判断，采用if...else...if格式实现</span><br><span class="line">        //为每种判断设置对应的条件</span><br><span class="line">        //为每种判断设置对应的奖励</span><br><span class="line">        //数据测试：正确数据，边界数据，错误数据</span><br><span class="line">        if(score&gt;100 || score&lt;0) &#123;</span><br><span class="line">            System.out.println(&quot;你输入的分数有误&quot;);</span><br><span class="line">        &#125; else if(score&gt;=95 &amp;&amp; score&lt;=100) &#123;</span><br><span class="line">            System.out.println(&quot;山地自行车一辆&quot;);</span><br><span class="line">        &#125; else if(score&gt;=90 &amp;&amp; score&lt;=94) &#123;</span><br><span class="line">            System.out.println(&quot;游乐场玩一次&quot;);</span><br><span class="line">        &#125; else if(score&gt;=80 &amp;&amp; score&lt;=89) &#123;</span><br><span class="line">            System.out.println(&quot;变形金刚玩具一个&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;胖揍一顿&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><h3 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a>switch语句结构</h3><p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        语句体1;</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        语句体2;</span><br><span class="line">        break;</span><br><span class="line">    ...</span><br><span class="line">    default:</span><br><span class="line">        语句体n+1;</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>执行流程：</strong><br>1、首先计算出表达式的值<br>2、其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。<br>3、最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</p>
<h3 id="switch语句案例-春夏秋冬"><a href="#switch语句案例-春夏秋冬" class="headerlink" title="switch语句案例-春夏秋冬"></a>switch语句案例-春夏秋冬</h3><p>需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季<br>节，并输出。<br>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">春：3、4、5</span><br><span class="line">夏：6、7、8</span><br><span class="line">秋：9、10、11</span><br><span class="line">冬：1、2、12</span><br></pre></td></tr></table></figure>
<p><strong>案例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class Demo1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //键盘录入月份数据，使用变量接收</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个月份：&quot;);</span><br><span class="line">        int month = sc.nextInt();</span><br><span class="line">        //case穿透</span><br><span class="line">        switch(month) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">            case 2:</span><br><span class="line">            ase 12:</span><br><span class="line">                System.out.println(&quot;冬季&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">            case 4:</span><br><span class="line">            case 5:</span><br><span class="line">                System.out.println(&quot;春季&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">            case 7:</span><br><span class="line">            case 8:</span><br><span class="line">                System.out.println(&quot;夏季&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 9:</span><br><span class="line">            case 10:</span><br><span class="line">            case 11:</span><br><span class="line">                System.out.println(&quot;秋季&quot;);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>如果switch中得case，没有对应break的话，则会出现case穿透的现象。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h3><p><strong>循环：</strong><br>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。<br><strong>for循环格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>格式分析：</strong><br>初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样<br>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去<br>循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情<br>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去<br><strong>执行流程：</strong><br>1、执行初始化语句<br>2、执行条件判断语句，看其结果是true还是false<br>    如果是false，循环结束<br>    如果是true，继续执行<br>3、执行循环体语句<br>4、执行条件控制语句<br>5、回到2、继续</p>
<h3 id="for循环练习-输出数据"><a href="#for循环练习-输出数据" class="headerlink" title="for循环练习-输出数据"></a>for循环练习-输出数据</h3><p><strong>需求：</strong><br>在控制台输出1-5和5-1的数据<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ForTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //需求：输出数据1-5</span><br><span class="line">        for(int i=1; i&lt;=5; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------&quot;);</span><br><span class="line">        //需求：输出数据5-1</span><br><span class="line">        for(int i=5; i&gt;=1; i--) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for循环练习-求和"><a href="#for循环练习-求和" class="headerlink" title="for循环练习-求和"></a>for循环练习-求和</h3><p><strong>需求：</strong><br>求1-5之间的数据和，并把求和结果在控制台输出<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ForTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span><br><span class="line">        int sum = 0;</span><br><span class="line">        //从1开始到5结束的数据，使用循环结构完成</span><br><span class="line">        for(int i=1; i&lt;=5; i++) &#123;</span><br><span class="line">        //将反复进行的事情写入循环结构内部</span><br><span class="line">        // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span><br><span class="line">            sum += i;</span><br><span class="line">        /*</span><br><span class="line">            sum += i; sum = sum + i;</span><br><span class="line">            第一次：sum = sum + i = 0 + 1 = 1;</span><br><span class="line">            第二次：sum = sum + i = 1 + 2 = 3;</span><br><span class="line">            第三次：sum = sum + i = 3 + 3 = 6;</span><br><span class="line">            第四次：sum = sum + i = 6 + 4 = 10;</span><br><span class="line">            第五次：sum = sum + i = 10 + 5 = 15;</span><br><span class="line">        */</span><br><span class="line">        &#125;</span><br><span class="line">        //当循环执行完毕时，将最终数据打印出来</span><br><span class="line">        System.out.println(&quot;1-5之间的数据和是：&quot; + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>本题要点：</strong><br>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量<br>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</p>
<h3 id="for循环练习-求偶数和"><a href="#for循环练习-求偶数和" class="headerlink" title="for循环练习-求偶数和"></a>for循环练习-求偶数和</h3><p><strong>需求：</strong><br>求1-100之间的偶数和，并把求和结果在控制台输出<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ForTest03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span><br><span class="line">        int sum = 0;</span><br><span class="line">        //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span><br><span class="line">        for(int i=1; i&lt;=100; i++) &#123;</span><br><span class="line">        //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span><br><span class="line">            if(i%2 == 0) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //当循环执行完毕时，将最终数据打印出来</span><br><span class="line">        System.out.println(&quot;1-100之间的偶数和是：&quot; + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="for循环练习-水仙花"><a href="#for循环练习-水仙花" class="headerlink" title="for循环练习-水仙花"></a>for循环练习-水仙花</h3><p><strong>需求：</strong><br>在控制台输出所有的“水仙花数”<br><strong>解释：</strong><br>什么是水仙花数？<br>水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数<br><strong>例如：</strong><br>153 3<em>3</em>3 + 5<em>5</em>5 + 1<em>1</em>1 &#x3D; 153<br><strong>思路：</strong><br>1、获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取<br>2、获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ForTest04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束</span><br><span class="line">        for(int i=100; i&lt;1000; i++) &#123;</span><br><span class="line">            //在计算之前获取三位数中每个位上的值</span><br><span class="line">            int ge = i%10;</span><br><span class="line">            int shi = i/10%10;</span><br><span class="line">            int bai = i/10/10%10;</span><br><span class="line">            //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等</span><br><span class="line">            if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;</span><br><span class="line">                //输出满足条件的数字就是水仙花数</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for循环练习-统计水仙花数个数"><a href="#for循环练习-统计水仙花数个数" class="headerlink" title="for循环练习-统计水仙花数个数"></a>for循环练习-统计水仙花数个数</h3><p><strong>需求：</strong><br>统计“水仙花数”一共有多少个，并在控制台输出个数<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ForTest05 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //定义变量count，用于保存“水仙花数”的数量，初始值为0</span><br><span class="line">        int count = 0;</span><br><span class="line">        //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束</span><br><span class="line">        for(int i=100; i&lt;1000; i++) &#123;</span><br><span class="line">            //在计算之前获取三位数中每个位上的值</span><br><span class="line">            int ge = i%10;</span><br><span class="line">            int shi = i/10%10;</span><br><span class="line">            int bai = i/10/10%10;</span><br><span class="line">            //在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1</span><br><span class="line">            if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //打印输出最终结果</span><br><span class="line">        System.out.println(&quot;水仙花共有：&quot; + count + &quot;个&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>本题要点：</strong><br>今后如果需求带有统计xxx，请先想到计数器变量<br>计数器变量定义的位置，必须在循环外部</p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="while结构"><a href="#while结构" class="headerlink" title="while结构"></a>while结构</h3><p><strong>while循环完整格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line">while (条件判断语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>while循环执行流程：</strong><br>1、执行初始化语句<br>2、执行条件判断语句，看其结果是true还是false<br>    如果是false，循环结束<br>    如果是true，继续执行<br>3、执行循环体语句<br>4、执行条件控制语句<br>5、回到2、继续<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WhileDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //需求：在控制台输出5次&quot;HelloWorld&quot;</span><br><span class="line">        //for循环实现</span><br><span class="line">        for(int i=1; i&lt;=5; i++) &#123;</span><br><span class="line">            System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------&quot;);</span><br><span class="line">        //while循环实现</span><br><span class="line">        int j = 1;</span><br><span class="line">        while(j&lt;=5) &#123;</span><br><span class="line">            System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="while循环练习-珠穆朗玛峰"><a href="#while循环练习-珠穆朗玛峰" class="headerlink" title="while循环练习-珠穆朗玛峰"></a>while循环练习-珠穆朗玛峰</h3><p><strong>需求：</strong><br>世界最高山峰是珠穆朗玛峰(8844.43米&#x3D;8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WhileTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //定义一个计数器，初始值为0</span><br><span class="line">        int count = 0;</span><br><span class="line">        //定义纸张厚度</span><br><span class="line">        double paper = 0.1;</span><br><span class="line">        //定义珠穆朗玛峰的高度</span><br><span class="line">        int zf = 8844430;</span><br><span class="line">        //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环</span><br><span class="line">        //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度</span><br><span class="line">        while(paper &lt;= zf) &#123;</span><br><span class="line">            //循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span><br><span class="line">            paper *= 2;</span><br><span class="line">            //在循环中执行累加，对应折叠了多少次</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        //打印计数器的值</span><br><span class="line">        System.out.println(&quot;需要折叠：&quot; + count + &quot;次&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="do…while循环结构"><a href="#do…while循环结构" class="headerlink" title="do…while循环结构"></a>do…while循环结构</h2><p><strong>完整格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line">do &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;while(条件判断语句);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>执行流程：</strong><br>1、执行初始化语句<br>2、执行循环体语句<br>3、执行条件控制语句<br>4、执行条件判断语句，看其结果是true还是false<br>    如果是false，循环结束<br>    如果是true，继续执行<br>5、回到2、继续<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DoWhileDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //需求：在控制台输出5次&quot;HelloWorld&quot;</span><br><span class="line">        //for循环实现</span><br><span class="line">        for(int i=1; i&lt;=5; i++) &#123;</span><br><span class="line">            System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------&quot;);</span><br><span class="line">        //do...while循环实现</span><br><span class="line">        int j = 1;</span><br><span class="line">        do &#123;</span><br><span class="line">            System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;while(j&lt;=5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="死循环（无限循环）的三种格式"><a href="#死循环（无限循环）的三种格式" class="headerlink" title="死循环（无限循环）的三种格式"></a>死循环（无限循环）的三种格式</h2><p>1、for(;;){}<br>2、while(true){}<br>3、do {} while(true);</p>
<h1 id="循环细节"><a href="#循环细节" class="headerlink" title="循环细节"></a>循环细节</h1><h2 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h2><h3 id="三种循环的区别-1"><a href="#三种循环的区别-1" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h3><p>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）<br>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</p>
<h3 id="for循环和while的区别"><a href="#for循环和while的区别" class="headerlink" title="for循环和while的区别"></a>for循环和while的区别</h3><p>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了<br>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</p>
<h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><h3 id="跳转控制语句（break）"><a href="#跳转控制语句（break）" class="headerlink" title="跳转控制语句（break）"></a>跳转控制语句（break）</h3><p>跳出循环，结束循环</p>
<h3 id="跳转控制语句（continue）"><a href="#跳转控制语句（continue）" class="headerlink" title="跳转控制语句（continue）"></a>跳转控制语句（continue）</h3><p>跳过本次循环，继续下次循环<br><strong>注意：</strong><br>continue只能在循环中进行使用！</p>
<h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><h3 id="循环嵌套概述："><a href="#循环嵌套概述：" class="headerlink" title="循环嵌套概述：###"></a>循环嵌套概述：###</h3><p>在循环中，继续定义循环<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    //外循环控制小时的范围，内循环控制分钟的范围</span><br><span class="line">    for (int hour = 0; hour &lt; 24; hour++) &#123;</span><br><span class="line">        for (int minute = 0; minute &lt; 60; minute++) &#123;</span><br><span class="line">            System.out.println(hour + &quot;时&quot; + minute + &quot;分&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>理解：</strong><br>请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的）<br><strong>结论：</strong><br>外循环执行一次，内循环执行一圈</p>
<h1 id="Randon"><a href="#Randon" class="headerlink" title="Randon"></a>Randon</h1><h2 id="Random产生随机数"><a href="#Random产生随机数" class="headerlink" title="Random产生随机数"></a>Random产生随机数</h2><p><strong>概述：</strong><br>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能<br><strong>使用步骤：</strong><br>1、导入包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span><br></pre></td></tr></table></figure>
<p>2、创建对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Random r = new Random();</span><br></pre></td></tr></table></figure>
<p>3、产生随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num = r.nextInt(10);</span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong><br>10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">public class RandomDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        //用循环获取10个随机数</span><br><span class="line">        for(int i=0; i&lt;10; i++) &#123;</span><br><span class="line">            //获取随机数</span><br><span class="line">            int number = r.nextInt(10);</span><br><span class="line">            System.out.println(&quot;number:&quot; + number);</span><br><span class="line">        &#125;</span><br><span class="line">        //需求：获取一个1-100之间的随机数</span><br><span class="line">        int x = r.nextInt(100) + 1;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Random练习-猜数字"><a href="#Random练习-猜数字" class="headerlink" title="Random练习-猜数字"></a>Random练习-猜数字</h3><p><strong>需求：</strong><br>程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？<br>当猜错的时候根据不同情况给出相应的提示<br>A. 如果猜的数字比真实数字大，提示你猜的数据大了<br>B. 如果猜的数字比真实数字小，提示你猜的数据小了<br>C. 如果猜的数字与真实数字相等，提示恭喜你猜中了<br><strong>示例代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class RandomTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        int number = r.nextInt(100) + 1;</span><br><span class="line">        while(true) &#123;</span><br><span class="line">            //使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            System.out.println(&quot;请输入你要猜的数字：&quot;);</span><br><span class="line">            int guessNumber = sc.nextInt();</span><br><span class="line">            //比较输入的数字和系统产生的数据，需要使用分支语句。</span><br><span class="line">            //这里使用if..else..if..格式，根据不同情况进行猜测结果显示</span><br><span class="line">            if(guessNumber &gt; number) &#123;</span><br><span class="line">                System.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;大了&quot;);</span><br><span class="line">            &#125; else if(guessNumber &lt; number) &#123;</span><br><span class="line">                System.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;小了&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;恭喜你猜中了&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE-笔记</category>
      </categories>
      <tags>
        <tag>循环嵌套</tag>
        <tag>Random</tag>
        <tag>条件控制语句</tag>
        <tag>循环语句</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-基础语法</title>
    <url>/2022/02/28/Java-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的<br>注释分为三种：<br><strong>单行注释：</strong><br>单行注释的格式是使用&#x2F;&#x2F;，从&#x2F;&#x2F;开始至本行结尾的文字将作为注释文字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这是单行注释文字</span><br></pre></td></tr></table></figure>
<p><strong>多行注释：</strong><br>多行注释的格式是使用&#x2F;* 和 *&#x2F;将一段较长的注释括起来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">这是多行注释文字</span><br><span class="line">这是多行注释文字</span><br><span class="line">这是多行注释文字</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>多行注释不能嵌套使用。</p>
<p><strong>文档注释：</strong><br>文档注释以 &#x2F;** 开始，以 *&#x2F; 结束。</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字是指被java语言赋予了特殊含义的单词。<br><strong>关键字的特点：</strong>关键字的字母全部小写。<br>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>常量：</strong><br>在程序运行过程中，其值不可以发生改变的量。<br><strong>Java中的常量分类：</strong><br>字符串常量 用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等<br>整数常量 整数，例如：-10、0、88等<br>小数常量 小数，例如：-5.5、1.0、88.88等<br>字符常量 用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等<br>布尔常量 布尔值，表示真假，只有两个值true和false<br>空常量 一个特殊的值，空值，值为null<br>除空常量外，其他常量均可使用输出语句直接输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(10); // 输出一个整数</span><br><span class="line">        System.out.println(5.5); // 输出一个小数</span><br><span class="line">        System.out.println(&#x27;a&#x27;); // 输出一个字符</span><br><span class="line">        System.out.println(true); // 输出boolean值true</span><br><span class="line">        System.out.println(&quot;HelloWorld&quot;); // 输出字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h3><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，通常用大写字母”B”表示，字节是由连续的8个位组成。<br>除了字节外还有一些常用的存储单位，其换算单位如下：<br>1B（字节） &#x3D; 8bit<br>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</p>
<h2 id="Java中的数据类型"><a href="#Java中的数据类型" class="headerlink" title="Java中的数据类型"></a>Java中的数据类型</h2><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型<br>两种。<br><strong>Java中的基本数据类型：</strong><br><img src="https://cdn.ideaopen.cn/Orangecat/uyf738ZZ.png"><br><strong>说明：</strong><br>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。<br>在java中整数默认是int类型，浮点数默认是double类型。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p><strong>变量：</strong><br>在程序运行过程中，其值可以发生改变的量。<br>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。<br><strong>变量的定义格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; // 声明变量并赋值</span><br><span class="line">int age = 18;</span><br><span class="line">System.out.println(age);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先声明，后赋值（使用前赋值即可）</span><br><span class="line">数据类型 变量名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line">double money;</span><br><span class="line">money = 55.5;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure>
<p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">int c,d; // 声明int类型的变量c和d，中间使用逗号隔开</span><br><span class="line">c = 30;</span><br><span class="line">d = 40;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure>

<p><strong>变量的使用：</strong><br>通过变量名访问即可。</p>
<h3 id="使用变量时的注意事项"><a href="#使用变量时的注意事项" class="headerlink" title="使用变量时的注意事项"></a>使用变量时的注意事项</h3><p>1、在同一对花括号中，变量名不能重复。<br>2、变量在使用之前，必须初始化（赋值）。<br>3、定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。<br>4、定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</p>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。<br><strong>Java中标识符的组成规则：</strong><br>1、由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。<br>2、不能使用java中的关键字作为标识符。<br>3、标识符对大小写敏感（区分大小写）。</p>
<h3 id="Java中标识符的命名约定："><a href="#Java中标识符的命名约定：" class="headerlink" title="Java中标识符的命名约定："></a>Java中标识符的命名约定：</h3><p><strong>小驼峰式命名：</strong><br>首字母小写，从第二个单词开始每个单词的首字母大写。<br><strong>如：</strong><br>变量名、方法名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userNmae</span><br></pre></td></tr></table></figure>

<p><strong>大驼峰式命名：</strong><br>每个单词的首字母都大写。<br><strong>如：</strong><br>类名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserName</span><br></pre></td></tr></table></figure>

<p>另外，标识符的命名最好可以做到见名知意<br><strong>如：</strong><br>username、studentNumber等。</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。<br><strong>自动类型转换：</strong><br>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。<br><strong>例如：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double num = 10; // 将int类型的10直接赋值给double类型</span><br><span class="line">System.out.println(num); // 输出10.0</span><br></pre></td></tr></table></figure>
<p><strong>强制类型转换：</strong><br>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。<br><strong>强制类型转换格式：</strong><br>目标数据类型 变量名 &#x3D; (目标数据类型)值或者变量;<br><strong>例如：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double num1 = 5.5;</span><br><span class="line">int num2 = (int) num1; // 将double类型的num1强制转换为int类型</span><br><span class="line">System.out.println(num2); // 输出5（小数位直接舍弃）</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.ideaopen.cn/Orangecat/yhjk2ZkV.png"><br><strong>说明：</strong><br>1、char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = &#x27;a&#x27;;</span><br><span class="line">System.out.println(a); // 将输出97</span><br></pre></td></tr></table></figure>

<p>2、整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte b1 = 10;</span><br><span class="line">byte b2 = 20;</span><br><span class="line">byte b3 = b1 + b2;</span><br><span class="line">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span><br><span class="line">// 修改为:</span><br><span class="line">int num = b1 + b2;</span><br><span class="line">// 或者：</span><br><span class="line">byte b3 = (byte) (b1 + b2);</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>boolean类型不能与其他基本数据类型相互转换。</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><p><strong>运算符：</strong><br>对常量或者变量进行操作的符号<br><strong>表达式：</strong><br>用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。<br>不同运算符连接的表达式体现的是不同类型的表达式。<br><strong>举例说明：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">int c = a + b;</span><br></pre></td></tr></table></figure>
<p><strong>+：</strong><br>是运算符，并且是算术运算符。<br><strong>a + b：</strong><br>是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p>
<h3 id="算术运算符-1"><a href="#算术运算符-1" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><img src="https://cdn.ideaopen.cn/Orangecat/xkJpa52g.png" alt="2022-02-28 201420.png"><br><strong>注意：</strong><br><strong>&#x2F;和%的区别：</strong><br>两个数据做除法，&#x2F;取结果的商，%取结果的余数。<br>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。<br><strong>商：</strong><br>在数学运算中是被除数除以余数得出的结果。<br><strong>余数：</strong><br>余数指整数除法中被除数未被除尽部分，且余数的取值范围为0到除数之间（不包括除数）的整数<br><strong>举例说明：</strong><br>15 ÷ 6 &#x3D; 2 余 3<br>商为2，余数为3。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 3;</span><br><span class="line">System.out.println(a / b); // 输出结果3</span><br><span class="line">System.out.println(a % b); // 输出结果1</span><br></pre></td></tr></table></figure>
<h3 id="字符的”-“操作"><a href="#字符的”-“操作" class="headerlink" title="字符的” + “操作"></a>字符的” + “操作</h3><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：<br>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加<br>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加<br>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span><br><span class="line">char ch1 = &#x27;a&#x27;;</span><br><span class="line">System.out.println(ch1 + 1); // 输出98，97 + 1 = 98</span><br><span class="line">char ch2 = &#x27;A&#x27;;</span><br><span class="line">System.out.println(ch2 + 1); // 输出66，65 + 1 = 66</span><br><span class="line">char ch3 = &#x27;0&#x27;;</span><br><span class="line">System.out.println(ch3 + 1); // 输出49，48 + 1 = 49</span><br></pre></td></tr></table></figure>
<p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。<br><strong>提升规则：</strong><br>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。<br>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型<br><strong>等级顺序：</strong><br>byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double<br><strong>例如：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte b1 = 10;</span><br><span class="line">byte b2 = 20;</span><br><span class="line">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span><br><span class="line">int i3 = b1 + b2; // 应该使用int接收</span><br><span class="line">byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型</span><br><span class="line">-------------------------------</span><br><span class="line">int num1 = 10;</span><br><span class="line">double num2 = 20.0;</span><br><span class="line">double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型</span><br></pre></td></tr></table></figure>
<p>正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。</p>
<h3 id="字符串的”-“操作"><a href="#字符串的”-“操作" class="headerlink" title="字符串的” + “操作"></a>字符串的” + “操作</h3><p>当“ + ”操作中出现字符串时，这个” + ”是字符串连接符，而不是算术运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;hello&quot;+ 666); // 输出：hello666</span><br></pre></td></tr></table></figure>
<p>在” + ”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“ + ”操作时，从左到右逐个执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(1 + 99 + &quot;hello&quot;); // 输出：199hello</span><br><span class="line">System.out.println(1 + 2 + &quot;hello&quot; + 3 + 4); // 输出：3hello34</span><br><span class="line">// 可以使用小括号改变运算的优先级</span><br><span class="line">System.out.println(1 + 2 + &quot;hello&quot; + (3 + 4)); // 输出：3hello7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。<br><img src="https://cdn.ideaopen.cn/Orangecat/zcTlEU9K.png" alt="2022-02-28 203220.png"><br><strong>注意：</strong><br>扩展的赋值运算符隐含了强制类型转换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">short s = 10;</span><br><span class="line">s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span><br><span class="line">s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span><br></pre></td></tr></table></figure>
<h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p><img src="https://cdn.ideaopen.cn/Orangecat/9CLX7mas.png" alt="2022-02-28 203421.png"><br><strong>注意事项：</strong><br>++和– 既可以放在变量的后边，也可以放在变量的前边。<br>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。<br>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。<br>参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。<br><strong>最常见的用法：</strong><br>单独使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 10;</span><br><span class="line">i++; // 单独使用</span><br><span class="line">System.out.println(&quot;i:&quot; + i); // i:11</span><br><span class="line">int j = 10;</span><br><span class="line">++j; // 单独使用</span><br><span class="line">System.out.println(&quot;j:&quot; + j); // j:11</span><br><span class="line">int x = 10;</span><br><span class="line">int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span><br><span class="line">System.out.println(&quot;x:&quot; + x + &quot;, y:&quot; + y); // x:11，y:10</span><br><span class="line">int m = 10;</span><br><span class="line">int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span><br><span class="line">System.out.println(&quot;m:&quot; + m + &quot;, m:&quot; + m); // m:11，m:11</span><br></pre></td></tr></table></figure>
<p><strong>练习：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 10;</span><br><span class="line">int y = x++ + x++ + x++;</span><br><span class="line">System.out.println(y); // y的值是多少？</span><br><span class="line">/*</span><br><span class="line">解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;</span><br><span class="line">输出结果为33。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。<br><img src="https://cdn.ideaopen.cn/Orangecat/6CyCfjzb.png" alt="2022-02-28 203811.png"><br><strong>注意事项：</strong><br>关系运算符的结果都是boolean类型，要么是true，要么是false。<br>千万不要把“&#x3D;&#x3D;”误写成“&#x3D;”，”&#x3D;&#x3D;”是判断是否相等的关系，”&#x3D;”是赋值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">System.out.println(a == b); // false</span><br><span class="line">System.out.println(a != b); // true</span><br><span class="line">System.out.println(a &gt; b); // false</span><br><span class="line">System.out.println(a &gt;= b); // false</span><br><span class="line">System.out.println(a &lt; b); // true</span><br><span class="line">System.out.println(a &lt;= b); // true</span><br><span class="line">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span><br><span class="line">boolean flag = a &gt; b;</span><br><span class="line">System.out.println(flag); // 输出false</span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。<br><img src="https://cdn.ideaopen.cn/Orangecat/B4lj56Yz.png" alt="2022-02-28 204103.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">int i = 10;</span><br><span class="line">int j = 20;</span><br><span class="line">int k = 30;</span><br><span class="line">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span><br><span class="line">System.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出false</span><br><span class="line">System.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出false</span><br><span class="line">System.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出false</span><br><span class="line">System.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出true</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span><br><span class="line">System.out.println((i &gt; j) | (i &gt; k)); //false | false,输出false</span><br><span class="line">System.out.println((i &lt; j) | (i &gt; k)); //true | false,输出true</span><br><span class="line">System.out.println((i &gt; j) | (i &lt; k)); //false | true,输出true</span><br><span class="line">System.out.println((i &lt; j) | (i &lt; k)); //true | true,输出true</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">//^ “异或”，相同为false，不同为true</span><br><span class="line">System.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出false</span><br><span class="line">System.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出true</span><br><span class="line">System.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出true</span><br><span class="line">System.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出false</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">//! “非”，取反</span><br><span class="line">System.out.println((i &gt; j)); //false</span><br><span class="line">System.out.println(!(i &gt; j)); //!false，,输出true</span><br></pre></td></tr></table></figure>
<h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p><img src="https://cdn.ideaopen.cn/Orangecat/ErEEMcuP.png" alt="2022-02-28 204255.png"><br>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。<br>1、逻辑与&amp;，无论左边真假，右边都要执行。<br>2、短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。<br>3、逻辑或|，无论左边真假，右边都要执行。<br>4、短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 3;</span><br><span class="line">int y = 4;</span><br><span class="line">System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); // 两个表达都会运算</span><br><span class="line">System.out.println(x); // 4</span><br><span class="line">System.out.println(y); // 5</span><br><span class="line">System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算</span><br><span class="line">System.out.println(x); // 4</span><br><span class="line">System.out.println(y); // 4</span><br></pre></td></tr></table></figure>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><strong>三元运算符语法格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关系表达式 ? 表达式1 : 表达式2;</span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong><br>问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。<br>其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。<br><strong>举例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span><br></pre></td></tr></table></figure>
<h3 id="三元运算符案例"><a href="#三元运算符案例" class="headerlink" title="三元运算符案例"></a>三元运算符案例</h3><p><strong>1、需求：</strong><br>动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class OperatorTest01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。</span><br><span class="line">        int weight1 = 180;</span><br><span class="line">        int weight2 = 200;</span><br><span class="line">        //2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。</span><br><span class="line">        boolean b = weight1 == weight2 ? true : false;</span><br><span class="line">        //3：输出结果</span><br><span class="line">        System.out.println(&quot;b:&quot; + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、需求：</strong><br>一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class OperatorTest02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span><br><span class="line">        int height1 = 150;</span><br><span class="line">        int height2 = 210;</span><br><span class="line">        int height3 = 165;</span><br><span class="line">        //2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span><br><span class="line">        int tempHeight = height1 &gt; height2 ? height1 : height2;</span><br><span class="line">        //3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span><br><span class="line">        int maxHeight = tempHeight &gt; height3 ? tempHeight : height3;</span><br><span class="line">        //4：输出结果</span><br><span class="line">        System.out.println(&quot;maxHeight:&quot; + maxHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>我们可以通过 Scanner 类来获取用户的输入。<br><strong>使用步骤如下：</strong><br>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br></pre></td></tr></table></figure>
<p>2、创建Scanner对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变</span><br></pre></td></tr></table></figure>
<p>3、接收数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class ScannerDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        //接收数据</span><br><span class="line">        int x = sc.nextInt();</span><br><span class="line">        //输出数据</span><br><span class="line">        System.out.println(&quot;x:&quot; + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>改写三个和尚案例，数据使用键盘录入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class ScannerTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //身高未知，采用键盘录入实现。首先导包，然后创建对象。</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        //键盘录入三个身高分别赋值给三个变量。</span><br><span class="line">        System.out.println(&quot;请输入第一个和尚的身高：&quot;);</span><br><span class="line">        int height1 = sc.nextInt();</span><br><span class="line">        System.out.println(&quot;请输入第二个和尚的身高：&quot;);</span><br><span class="line">        int height2 = sc.nextInt();</span><br><span class="line">        System.out.println(&quot;请输入第三个和尚的身高：&quot;);</span><br><span class="line">        nt height3 = sc.nextInt();</span><br><span class="line">        //用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span><br><span class="line">        int tempHeight = height1 &gt; height2 ? height1 : height2;</span><br><span class="line">        //用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span><br><span class="line">        int maxHeight = tempHeight &gt; height3 ? tempHeight : height3;</span><br><span class="line">        //输出结果。</span><br><span class="line">        System.out.println(&quot;这三个和尚中身高最高的是：&quot; + maxHeight +&quot;cm&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaSE-笔记</category>
      </categories>
      <tags>
        <tag>注释</tag>
        <tag>关键字</tag>
        <tag>常量</tag>
        <tag>数据类型</tag>
        <tag>变量</tag>
        <tag>标识符</tag>
        <tag>类型转换</tag>
        <tag>数据输入</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境配置</title>
    <url>/2022/02/28/Java-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>以Windows系统下的Java环境变量配置为例进行说明。<br><strong>1、</strong>右键点击“此电脑”，选择“属性”项。<br><img src="https://cdn.ideaopen.cn/Orangecat/4GMNvery.png" alt="2022-02-28181331.png"><br><strong>2、</strong>点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。<br><img src="https://cdn.ideaopen.cn/Orangecat/VemQUNSw.png" alt="2022-02-28181648.png"><br><strong>3、</strong>在弹出的“环境变量”框，中选择下方的系统变量，点击新建。<br><img src="https://cdn.ideaopen.cn/Orangecat/yHNEs25q.png" alt="2022-02-28 181824.png"><br><strong>4、</strong>在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。<br>变量名为：JAVA_HOME<br>变量值为JDK的安装路径，到bin目录的上一层即可。比如E:\develop\Java\jdk-11<br><strong>注意：</strong>为防止路径输入错误，可以打开文件夹，拷贝路径。<br><img src="https://cdn.ideaopen.cn/Orangecat/cFPfBg50.png" alt="2022-02-28 182240.png"><br>点击确定后，系统变量中会出现一条新的记录。<br><img src="https://cdn.ideaopen.cn/Orangecat/puNbiejm.png" alt="2022-02-28 182359.png"><br><strong>5、</strong>选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA_HOME变量添加到“Path”变量中。<br><img src="https://cdn.ideaopen.cn/Orangecat/jDvQD1dE.png" alt="2022-02-28 182534.png"><br><strong>6、</strong>在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin<br><img src="https://cdn.ideaopen.cn/Orangecat/k17s1Dca.png" alt="2022-02-28 182742.png"><br>输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。<br><img src="https://cdn.ideaopen.cn/Orangecat/A7wvchMB.png" alt="2022-02-28 182930.png"><br>至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。<br>如果之前已经打开命令行窗口，需要关闭重新启动才可。在非JDK安装的bin目录下，输入java或者javac命令，查看效果。<br><img src="https://cdn.ideaopen.cn/Orangecat/Ouc8kR7C.png" alt="2022-02-28 183044.png"></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>-环境配置</tag>
      </tags>
  </entry>
</search>
